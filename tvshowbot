import os
import logging
import requests
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

# Your TMDb API key
TMDB_API_KEY = 'your_tmdb_api_key'

# Telegram Bot token
TELEGRAM_TOKEN = 'your_telegram_bot_token'

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Initialize the bot
bot = Bot(token=TELEGRAM_TOKEN)
updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
dispatcher = updater.dispatcher

# Command handler to start the bot
def start(update, context):
    user = update.effective_user
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"Hello, {user.mention_html()}! I can help you find information about TV shows. Use /search to look up a TV show.")

# Command handler to search for a TV show using TMDb API
def search_tv_show(update, context):
    user = update.effective_user
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"{user.mention_html()}, please enter the title of the TV show you want to search for.")

# Handler for user's text input (TV show title)
def handle_tv_show_input(update, context):
    user_input = update.message.text
    # Use the TMDb API to search for TV shows
    search_url = f'https://api.themoviedb.org/3/search/tv'
    params = {
        'api_key': TMDB_API_KEY,
        'query': user_input
    }
    response = requests.get(search_url, params=params)
    data = response.json()
    
    if 'results' in data:
        tv_shows = data['results']
        if tv_shows:
            # Display the first TV show found
            tv_show = tv_shows[0]
            name = tv_show.get('name', 'N/A')
            overview = tv_show.get('overview', 'N/A')
            first_air_date = tv_show.get('first_air_date', 'N/A')
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"Name: {name}\nFirst Air Date: {first_air_date}\nOverview: {overview}")
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="No results found for that TV show title.")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="An error occurred while searching for the TV show.")

# Set up command and message handlers
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('search', search_tv_show))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_tv_show_input))

# Start the bot
updater.start_polling()
updater.idle()
