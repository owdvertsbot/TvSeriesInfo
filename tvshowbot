import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, InlineQueryHandler
import requests

# Initialize your Telegram Bot API Token and TMDB API Key
TOKEN = "6230370760:AAEhzNWVt6s8QHg48A3rw9bqmESwGOip1XI"
TMDB_API_KEY = "81cc1df77fb33a00b3b88dc5c3a26afe"

bot = telegram.Bot(token=TOKEN)

# Create a function to handle the /start command
def start(update, context):
    update.message.reply_text("Welcome to the TV Show Info Bot! Send me the name of a TV show to get information.")

# Create a function to handle the /showinfo command
def show_info(update, context):
    show_name = " ".join(context.args)  # Extract the show name from the user's message
    response = requests.get(f"https://api.themoviedb.org/3/search/tv?api_key={TMDB_API_KEY}&query={show_name}")
    
    if response.status_code == 200:
        data = response.json()
        if data['results']:
            show = data['results'][0]
            title = show['name']
            overview = show['overview']
            release_date = show['first_air_date']
            reply_text = f"Title: {title}\nOverview: {overview}\nRelease Date: {release_date}"
        else:
            reply_text = "TV show not found."
    else:
        reply_text = "An error occurred while fetching data."

    update.message.reply_text(reply_text)

# Create a function to handle inline queries
def inline_query(update, context):
    query = update.inline_query.query
    response = requests.get(f"https://api.themoviedb.org/3/search/tv?api_key={TMDB_API_KEY}&query={query}")
    
    if response.status_code == 200:
        data = response.json()
        results = [
            telegram.InlineQueryResultArticle(
                id=str(show['id']),
                title=show['name'],
                input_message_content=telegram.InputTextMessageContent(
                    message_text=f"Title: {show['name']}\nOverview: {show['overview']}\nRelease Date: {show['first_air_date']}"
                ),
            )
            for show in data['results']
        ]
        update.inline_query.answer(results)
        
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("showinfo", show_info, pass_args=True))
    dp.add_handler(InlineQueryHandler(inline_query))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
